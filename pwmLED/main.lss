
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00000112  00000186  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000112  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000011  00000000  00000000  00000186  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000735  00000000  00000000  00000200  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000066a  00000000  00000000  00000935  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000027d  00000000  00000000  00000f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000121c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000032a  00000000  00000000  00001270  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000005a  00000000  00000000  0000159a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015f4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <timer0_init>:
#include <avr/interrupt.h>
 
void timer0_init()
{
   // Set on match from top, clear on match from below
   TCCR0A  = ((1 << COM0A1) | (1 << WGM00) | (1 << COM0B1) | (1 << COM0B0));
  80:	81 eb       	ldi	r24, 0xB1	; 177
  82:	84 bd       	out	0x24, r24	; 36
   TCCR1A = ((1 << COM1A1) | (1 << COM1A0) | (1 << WGM10));
  84:	81 ec       	ldi	r24, 0xC1	; 193
  86:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>

   // prescaler
   TCCR1B = (1 << CS10);
  8a:	81 e0       	ldi	r24, 0x01	; 1
  8c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
   TCCR0B  = (1 << CS00);
  90:	85 bd       	out	0x25, r24	; 37
}
  92:	08 95       	ret

00000094 <adc_init>:
 
void adc_init()
{
    // AREF = AVcc
    ADMUX = (1<<REFS0);
  94:	80 e4       	ldi	r24, 0x40	; 64
  96:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 
    // ADC Enable and prescaler of 128
    // 16000000/128 = 125000
    ADCSRA = (1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0);
  9a:	87 e8       	ldi	r24, 0x87	; 135
  9c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
}
  a0:	08 95       	ret

000000a2 <adc_read>:
{
    // select the corresponding channel 0~7
    // ANDing with '7' will always keep the value
    // of 'ch' between 0 and 7
    ch &= 0b00000111;  // AND operation with 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  a2:	90 91 7c 00 	lds	r25, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  a6:	98 7f       	andi	r25, 0xF8	; 248
    ch &= 0b00000111;  // AND operation with 7
  a8:	87 70       	andi	r24, 0x07	; 7
    ADMUX = (ADMUX & 0xF8)|ch;     // clears the bottom 3 bits before ORing
  aa:	98 2b       	or	r25, r24
  ac:	90 93 7c 00 	sts	0x007C, r25	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
 
    // start single conversion
    // write '1' to ADSC
    ADCSRA |= (1<<ADSC);
  b0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b4:	80 64       	ori	r24, 0x40	; 64
  b6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
 
    // wait for conversion to complete
    // ADSC becomes '0' again
    // till then, run loop continuously
    while(ADCSRA & (1<<ADSC));
  ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  be:	86 fd       	sbrc	r24, 6
  c0:	fc cf       	rjmp	.-8      	; 0xba <adc_read+0x18>
 
    return (ADC);
  c2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
  c6:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
}
  ca:	08 95       	ret

000000cc <main>:

int main(void)
{
	sei();
  cc:	78 94       	sei
    adc_init();
  ce:	0e 94 4a 00 	call	0x94	; 0x94 <adc_init>
    // connect led to pin PC0
    DDRD |= ((1 << 6) | (1 << 5));
  d2:	8a b1       	in	r24, 0x0a	; 10
  d4:	80 66       	ori	r24, 0x60	; 96
  d6:	8a b9       	out	0x0a, r24	; 10
    DDRB |= (1 << 1);
  d8:	21 9a       	sbi	0x04, 1	; 4
 
    // initialize timer
    timer0_init();
  da:	0e 94 40 00 	call	0x80	; 0x80 <timer0_init>
    uint8_t value;
    // loop forever
    while(1){
    //set pwm to poti value
    value = adc_read(0)/4;
  de:	80 e0       	ldi	r24, 0x00	; 0
  e0:	0e 94 51 00 	call	0xa2	; 0xa2 <adc_read>
  e4:	ec 01       	movw	r28, r24
  e6:	d6 95       	lsr	r29
  e8:	c7 95       	ror	r28
  ea:	d6 95       	lsr	r29
  ec:	c7 95       	ror	r28
    OCR1A = value;
  ee:	ce 01       	movw	r24, r28
  f0:	99 27       	eor	r25, r25
  f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
    OCR0B = adc_read(1)/4;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 51 00 	call	0xa2	; 0xa2 <adc_read>
 100:	96 95       	lsr	r25
 102:	87 95       	ror	r24
 104:	96 95       	lsr	r25
 106:	87 95       	ror	r24
 108:	88 bd       	out	0x28, r24	; 40
    OCR0A = value; 
 10a:	c7 bd       	out	0x27, r28	; 39
 10c:	e8 cf       	rjmp	.-48     	; 0xde <main+0x12>

0000010e <_exit>:
 10e:	f8 94       	cli

00000110 <__stop_program>:
 110:	ff cf       	rjmp	.-2      	; 0x110 <__stop_program>
